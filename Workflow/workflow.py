from langgraph.graph import StateGraph, START, END
from langgraph.checkpoint.postgres import PostgresSaver # type: ignore
from psycopg_pool import ConnectionPool # type: ignore

from Workflow.utils.nodes import (
    classify_user_intent,
    generate_answer,
    question_answer,
    recommend_doctor,
    system_flow_qa,
    write_and_execute_query,
)
from Workflow.utils.state import State



class Workflow:
    def __init__(self, config):
        self.graph_builder = StateGraph(State)
        self.graph_builder.add_node("question_answer", question_answer)
        self.graph_builder.add_sequence([write_and_execute_query, generate_answer])
        self.graph_builder.add_node("system_flow_qa", system_flow_qa)
        self.graph_builder.add_node("recommend_doctor", recommend_doctor)

        self.graph_builder.add_conditional_edges(
            START,
            classify_user_intent,
            {
                "query_related": "write_and_execute_query",
                "medical_related": "question_answer",
                "system_flow_related": "system_flow_qa",
                "doctor_recommendation_related": "recommend_doctor"
            }
        )

        self.graph_builder.add_edge("write_and_execute_query", "generate_answer")
        self.graph_builder.add_edge("question_answer", END)
        self.graph_builder.add_edge("generate_answer", END)
        self.graph_builder.add_edge("system_flow_qa", END)
        self.graph_builder.add_edge("recommend_doctor", END)

        self.checkpointer = PostgresSaver(config.postgres_pool)
        self.graph = self.graph_builder.compile(checkpointer=self.checkpointer)

    def get_response(self, question: str, payload: dict, config: dict) -> str:
        """
        Get a response from the workflow by processing the user's question.
        The payload (decoded JWT token) is included in the input state.

        Args:
            question (str): The user's question.
            payload (dict): The decoded JWT token payload.

        Returns:
            str: The response generated by the workflow.
        """

        user_id = payload.get("user_id")
        
        # config = {"configurable": {"thread_id": f"{user_id}"}}
        try:
            # Include the payload in the input state
            events = self.graph.stream(
                {"messages": [{"role": "user", "content": question}], "payload": payload},
                config,
                stream_mode="values",
            )
            
            last_message = None
            for event in events:
                last_message = event["messages"][-1].content
            
            return last_message if last_message else "No results found."
        except Exception as e:
            print(f"An error occurred during workflow execution: {e}")
            return "An error occurred while processing the request."